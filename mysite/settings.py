"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

# 프로젝트의 루트폴더를 찾아준다!!
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# 보안에 관련된 부분들?!!??? 관련 키값들!?!?? 랜덤으로 생성된다!?!?
SECRET_KEY = 's9iiiv99-(mc)^5*aih!=+obv4yu_co4deua64fo6hmi3)^l&y'


# SECURITY WARNING: don't run with debug turned on in production!

# 웹프로그램은 거의다 문법오류? 디버깅이 어렵다. 에러를 보면서 처리하는게 좋다.
DEBUG = False

# 어떤 주소로 접속했을때 작동되게 할것인가?? 어떤 도메인을 연결할 것인지!?? 도메인을 연관지을때!?
# DEBUG모드와 연관, True / False에 따라 빈값허용 다름
ALLOWED_HOSTS = ['*']


# Application definition

# 하나의 프로젝트 내에 여러개의 다양한 APP을 수행? 올릴 수 있게 되어있다.
# 다양한 기능의 앱들이 모여있다? 앱 단위로 개발
# 앱을 생성하고 인식시키기 위한 옵션, DB연동 등등에 사용
# 이정도로도 편리하고 빠르게 사이트 작성/운영이 가능
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',  # ,는 끝에 기본이다!
    'bookmark',
]

# App~앱 사이의 역할!? 미들웨어, 대부분은 보안에 관련된것들이 많다?
# 내가 직접 짠것들보다도 기능이 훨씬 더 좋다.
# csrf토큰 및 폼? 옵션 등등
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 메인 urls.py설정, 가장 최고?의 root urls.py설정
ROOT_URLCONF = 'mysite.urls'

# 어떤 화면을 html화 해서 보여줄때, 보여줄? 랜더링해줄? 방식, 템플릿 엔진 설정...장고템플릿엔진이 기본!! ex) 진자2 등
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates'),], # APP_DIRS이외에 templates들을 찾을 경로를 지정, D등으로 복사 붙일수도 있기에, BASE_DIR기준으로 설정하는게 좋다. // 설정한게 templates라고 이름을 줘서 그렇게 작동, 다른 이름으로 넣어도 상관이 없다.
        'APP_DIRS': True, # 북마크앱? 생성시 화면 구성할 템플릿을 미리 생성해놓음? 어느 경로의 템플릿을 해석할 것인지? 기본 경로?앱 하단의 경로를 쓴다? 앱 폴더내의 templates를 찾지 않음!? 앱 단위기에 true 앱폴더외에 더 넣을 경우, DIRS=내에 경로들을 추가시킴!?
        'OPTIONS': {
            'context_processors': [ # 모든 화면에서 처리해줘야할 일들!??? 모든 페이지에서 처리해줌, 쇼핑몰에서 카트기능? 구현시 무조건 사용??
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 배포시에 참고? 수정
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# 관련 DB설정, 헤로쿠등에 postgre등을 사용 가능
# sqlite3, mysql, postgre등등
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

# django의 다국어 지원 관련, 관리자메뉴의 한글띄우기??
# 고객들의 접속한 국가에 맞게 보여주는 것도 가능
# django.util.timezone ??을 사용, #pytz 모듈도 같이 설치됨?
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

# 인텔리자이션?
USE_I18N = True

# 로컬라이제이션
USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# media파일들 url설정?
# 아파치? 등 특정 취약점을, 특정 모델을 찾아내서 공격??? 장고? 워드프레스? 스프링으로 만들어졌네??
# 이를 찾아내면 공략방법이 생김
# 이러한 취약점? 모델을 숨기려고, 가상 url을 생성, 때문에 미디어?들이 보안상의 이유로, static을 포함한 url로 서비스가 된다.
# 가상 url이며, 실제와 다르다.  가상경로, 가상경로를 설정함으로써, 해당파일은 어디에 있는지 위치 유추가 불가능하다.
# client가 아무리 접속을 해줘도, 어디의 파일인지 알 수가 없다.
STATIC_URL = '/static/'

# runserver로 올리면, 알아서 감춰주지만, 배포할때는 다르게 접근해야...

# 정적파일들을 찾느라 오버헤드가 심해지니, 앱이나 프로젝트 폴더구조를 다 뒤져야하니...
# 어느 위치에 모아놓고 서비스할지, 몰아넣을 경로를 설정...STATIC_ROOT라고 한다.
# 사진파일등은 미디어 파일이라고 하는데, 이것도 역시 서버에게 어디서 찾아! 하고 MEDIA_ROOT 와 같이 설정
STATIC_ROOT = os.path.join(BASE_DIR, 'static') # app에서 작동하는 모든 종류의 static파일들이 모인다. js, css 등등등